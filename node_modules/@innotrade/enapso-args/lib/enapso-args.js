// Innotrade Enapso Smart Arguments Processor Demo
// (C) Copyright 2019-2020 Innotrade GmbH, Herzogenrath, NRW, Germany
// Author: Alexander Schulze
// Smart Arguments Processing


class EnapsoArguments {

	constructor() {
	}

	// turns an object into an array of a single object
	getArrayOf(obj) {
		return Array.isArray(obj) ? obj : (obj === undefined ? [] : [obj]);
	}

	// validate args against a schema
	getArgs(args, schema, cb) {

		function fireError(err) {
			if (cb) {
				cb(err);
			} else {
				throw err;
			}
		}

		let res = {};

		// if no args are passed, at least return an empty object
		if (args === undefined) {
			args = {};
		}

		// if we don't get a schema just return args "as is"
		if (!schema) {
			return args;
		}

		// otherweise analyze schema
		for (let idx = 0; idx < schema.args.length; idx++) {

			let arg = schema.args[idx];
			let identifier = arg.identifier;
			let type = arg.type;

			let value;
			try {
				value = args[idx];
			} catch (e) {
				value = args[identifier]
			}

			// check "required"
			if (arg.required) {
				if (value === undefined) {
					fireError({
						message: "Argument '"
							+ identifier + "' is required.",
						value
					});
				}
			} else if (value === undefined && arg.default !== undefined) {
				value = arg.default;
			}

			if (type) {
				if (typeof value != type) {
					fireError({
						message: "Argument '" + identifier
							+ "' must be of type '" + type
							+ "' but is of type '" + typeof value + "'.",
						value
					});
				}
			}

			res[identifier] = value;
		}

		return res;
	}

}

let enargs = new EnapsoArguments();

module.exports = {
	EnapsoArguments,
	enargs
};